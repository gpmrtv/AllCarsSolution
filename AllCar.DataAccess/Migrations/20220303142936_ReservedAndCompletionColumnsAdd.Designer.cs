// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using AllCar.DataAccess.Context;

#nullable disable

namespace AllCar.DataAccess.Migrations
{
    [DbContext(typeof(SqlEfContext))]
    [Migration("20220303142936_ReservedAndCompletionColumnsAdd")]
    partial class ReservedAndCompletionColumnsAdd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AllCar.Shared.Entities.CarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("BodyNum")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ChassisNum")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedUserId");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer")
                        .HasColumnName("DealerId");

                    b.Property<string>("EngineNum")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedUserId");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Cars", (string)null);
                });

            modelBuilder.Entity("AllCar.Shared.Entities.ClientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedUserId");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer")
                        .HasColumnName("DealerId");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedUserId");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("AllCar.Shared.Entities.DealerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedUserId");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedUserId");

                    b.HasKey("Id");

                    b.ToTable("Dealers", (string)null);
                });

            modelBuilder.Entity("AllCar.Shared.Entities.EmployeeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedUserId");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer")
                        .HasColumnName("DealerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedUserId");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("AllCar.Shared.Entities.EmploymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedUserId");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer")
                        .HasColumnName("DealerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedUserId");

                    b.HasKey("Id");

                    b.ToTable("Employments", (string)null);
                });

            modelBuilder.Entity("AllCar.Shared.Entities.EmploymentsToOrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedUserId");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer")
                        .HasColumnName("DealerId");

                    b.Property<Guid>("EmploymentId")
                        .HasColumnType("uuid");

                    b.Property<float>("Hours")
                        .HasColumnType("real");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedUserId");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("EmploymentsToOrders", (string)null);
                });

            modelBuilder.Entity("AllCar.Shared.Entities.PartEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedUserId");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer")
                        .HasColumnName("DealerId");

                    b.Property<string>("Description")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedUserId");

                    b.HasKey("Id");

                    b.ToTable("Parts", (string)null);
                });

            modelBuilder.Entity("AllCar.Shared.Entities.PartsToOrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedUserId");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer")
                        .HasColumnName("DealerId");

                    b.Property<bool?>("IsReserved")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedUserId");

                    b.Property<Guid>("WorkOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("PartsToOrders", (string)null);
                });

            modelBuilder.Entity("AllCar.Shared.Entities.PaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedUserId");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer")
                        .HasColumnName("DealerId");

                    b.Property<bool>("IsAllPaid")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedUserId");

                    b.HasKey("Id");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("AllCar.Shared.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedUserId");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer")
                        .HasColumnName("DealerId");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedUserId");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AllCar.Shared.Entities.WorkOrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDateTime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CreatedUserId");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer")
                        .HasColumnName("DealerId");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDateTime");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("integer")
                        .HasColumnName("UpdatedUserId");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("WorkOrders", (string)null);
                });

            modelBuilder.Entity("AllCar.Shared.Entities.EmploymentsToOrderEntity", b =>
                {
                    b.HasOne("AllCar.Shared.Entities.EmploymentEntity", "Employment")
                        .WithMany("EmploymentsToOrders")
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllCar.Shared.Entities.WorkOrderEntity", "WorkOrder")
                        .WithMany("EmploymentsToOrders")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employment");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("AllCar.Shared.Entities.PartsToOrderEntity", b =>
                {
                    b.HasOne("AllCar.Shared.Entities.PartEntity", "Part")
                        .WithMany("PartsToOrders")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllCar.Shared.Entities.WorkOrderEntity", "WorkOrder")
                        .WithMany("PartsToOrders")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("AllCar.Shared.Entities.WorkOrderEntity", b =>
                {
                    b.HasOne("AllCar.Shared.Entities.CarEntity", "Car")
                        .WithMany("WorkOrders")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllCar.Shared.Entities.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllCar.Shared.Entities.EmployeeEntity", "Employee")
                        .WithMany("WorkOrders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllCar.Shared.Entities.PaymentEntity", "Payment")
                        .WithOne("WorkOrder")
                        .HasForeignKey("AllCar.Shared.Entities.WorkOrderEntity", "PaymentId");

                    b.Navigation("Car");

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("AllCar.Shared.Entities.CarEntity", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("AllCar.Shared.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("AllCar.Shared.Entities.EmploymentEntity", b =>
                {
                    b.Navigation("EmploymentsToOrders");
                });

            modelBuilder.Entity("AllCar.Shared.Entities.PartEntity", b =>
                {
                    b.Navigation("PartsToOrders");
                });

            modelBuilder.Entity("AllCar.Shared.Entities.PaymentEntity", b =>
                {
                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("AllCar.Shared.Entities.WorkOrderEntity", b =>
                {
                    b.Navigation("EmploymentsToOrders");

                    b.Navigation("PartsToOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
